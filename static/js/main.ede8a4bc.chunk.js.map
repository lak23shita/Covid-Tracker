{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/CountryPicker/CountryPicker.js","App.js","serviceWorker.js","index.js","App.module.css","components/CountryPicker/CountryPicker.module.css","components/logo.png","components/Chart/Chart.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","styles","container","Grid","spacing","justify","item","component","Card","xs","md","cx","card","infected","CardContent","Typography","color","gutterBottom","variant","start","end","value","duration","separator","Date","toDateString","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchMyAPI","barChart","labels","datasets","label","backgroundColor","options","legend","display","title","text","lineChart","length","borderColor","fill","CountryPicker","handleCountryChange","fetchedCountries","setfetchCountries","fetchApi","FormControl","formControl","NativeSelect","omg","defaultValue","onChange","e","target","i","key","App","state","fetchedData","setState","this","logo","src","type","bgChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ede8a4bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__1oQCV\",\"card\":\"Cards_card__2TaAu\",\"infected\":\"Cards_infected__gaIXb\",\"recovered\":\"Cards_recovered__1waIz\",\"deaths\":\"Cards_deaths__3Bffx\"};","import React from 'react'\r\nimport {Card, CardContent , Typography , Grid} from '@material-ui/core';\r\nimport styles from './Cards.module.css';\r\nimport CountUp from \"react-countup\";\r\n//this is used to add multiple classes\r\nimport cx from \"classnames\";\r\n\r\nfunction Cards({data:{confirmed,recovered,deaths,lastUpdate}}) {\r\n  if(!confirmed){\r\n      return 'Loading......';\r\n  }\r\n    return (\r\n        <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n            <Grid item component ={Card} xs={12} md={3}className={cx(styles.card,styles.infected)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Infected</Typography>\r\n                    <Typography variant=\"h5\"><CountUp start={0} end={confirmed.value} duration={2.5} separator=\",\"/></Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number Of Active Cases of COVID 19</Typography>\r\n                </CardContent>\r\n            \r\n            </Grid>\r\n            <Grid item component ={Card} xs={12} md={3}className={cx(styles.card,styles.recovered)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Recovered</Typography>\r\n                    <Typography variant=\"h5\"><CountUp start={0} end={recovered.value} duration={2.5} separator=\",\"/></Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number Of recoveries from COVID 19</Typography>\r\n                </CardContent>\r\n            \r\n            </Grid>\r\n            <Grid item component ={Card} xs={12} md={3}className={cx(styles.card,styles.deaths)}>\r\n                <CardContent>\r\n                    <Typography color=\"textSecondary\" gutterBottom>Deaths</Typography>\r\n                    <Typography variant=\"h5\"><CountUp start={0} end={deaths.value} duration={2.5} separator=\",\"/></Typography>\r\n                    <Typography color=\"textSecondary\">{new Date(lastUpdate).toDateString()}</Typography>\r\n                    <Typography variant=\"body2\">Number Of deaths from  COVID 19</Typography>\r\n                </CardContent>\r\n            \r\n            </Grid>\r\n        </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import axios from 'axios';\r\nconst url ='https://covid19.mathdro.id/api';\r\n\r\n//this is used to fetch data and return the response from the api from the async function\r\n//we are destructing the data in various parts so that we can use it\r\nexport const fetchData = async (country)=>{\r\n    let changeableUrl = url;\r\n    if(country){\r\n        changeableUrl = `${url}/countries/${country}`\r\n    }\r\n\r\n    try{\r\n        const {data: {confirmed,recovered,deaths,lastUpdate}} =await axios.get(changeableUrl);\r\n\r\n    return {confirmed,recovered, deaths,lastUpdate}\r\n    \r\n    } catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport const fetchDailyData = async()=>{\r\n    try{\r\n        const {data} =await axios.get(`${url}/daily`);\r\n\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed:dailyData.confirmed.total,\r\n            deaths:dailyData.deaths.total,\r\n            date:dailyData.reportDate,\r\n        }));\r\n      return modifiedData;\r\n        }\r\n    catch(error){\r\n\r\n    }\r\n}\r\n\r\nexport const fetchCountries =async ()=>{\r\n    try{\r\n        const {data:{countries}} = await axios.get(`${url}/countries`);\r\n       return countries.map((country)=> country.name);\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}","import React ,{useState,useEffect} from 'react'\r\nimport {fetchDailyData} from '../../api';\r\nimport { Line,Bar} from 'react-chartjs-2';\r\n\r\nimport styles from './Chart.module.css';\r\nfunction Chart({data:{confirmed,recovered, deaths},country}) {\r\n    const [dailyData , setDailyData] =useState({});\r\n\r\n    \r\n  useEffect(() => {\r\n    const fetchMyAPI = async () => {\r\n        setDailyData(await fetchDailyData()) ;\r\n\r\n    \r\n    };\r\n\r\n    fetchMyAPI(); //calling the function\r\n    //re render when there is a empty string\r\n  },[]);\r\n\r\n   const barChart = (\r\n    confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: ['Infected', 'Recovered', 'Deaths'],\r\n          datasets: [\r\n            {\r\n              label: 'People',\r\n              backgroundColor: ['rgba(0, 0, 255, 0.5)', 'rgba(0, 255, 0, 0.5)', 'rgba(255, 0, 0, 0.5)'],\r\n              data: [confirmed.value,recovered.value, deaths.value],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null\r\n  );\r\n\r\n  const lineChart = (\r\n    dailyData.length \r\n    ? (\r\n      <Line\r\n        data={{\r\n            //in this we are destructuring the dates and then assigning that date to a date\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [{\r\n            data: dailyData.map(({confirmed}) => confirmed),\r\n            label: 'Infected',\r\n            borderColor: '#3333ff',\r\n            //this will fill the space below the chart\r\n            fill: true,\r\n          }, {\r\n            data: dailyData.map(({deaths}) => deaths),\r\n            label: 'Deaths',\r\n            borderColor: 'red',\r\n            backgroundColor: 'rgba(255, 0, 0, 0.5)',\r\n            fill: true,\r\n          }],\r\n        }}\r\n      />) : null\r\n  );\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      {country? barChart : lineChart}\r\n    </div>\r\n  );\r\n};\r\nexport default Chart\r\n","import React ,{useState, useEffect} from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './CountryPicker.module.css';\r\n import {fetchCountries} from '../../api';\r\n\r\nfunction CountryPicker({handleCountryChange}) {\r\n\r\n    const [fetchedCountries, setfetchCountries] = useState([]);\r\n    useEffect(()=>{\r\n        const fetchApi = async()=>{\r\n            setfetchCountries(await fetchCountries());\r\n\r\n        }\r\n        fetchApi();\r\n        //changes only when setfetchCountries changes\r\n    },[setfetchCountries]);\r\n\r\n    return (\r\n        <div>\r\n           <FormControl className={styles.formControl}>\r\n                <NativeSelect className={styles.omg} defaultValue=\"\" onChange={(e)=>handleCountryChange(e.target.value)}>\r\n                    <option value=\"\">Global</option>\r\n                    {/*i is a index or a counter*/}\r\n                    {fetchedCountries.map((country, i) => <option key={i} value={country}>{country}</option>)}\r\n                    </NativeSelect>\r\n           </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryPicker\r\n","import React ,{Component} from 'react';\r\nimport logo from './components/logo.png';\r\nimport styles from './App.module.css';\r\nimport { Cards,Chart,CountryPicker } from \"./components\";\r\nimport {fetchData} from './api';\r\n//import Toggle from './components/Toggle';\r\n\r\n class App extends React.Component {\r\n  state={\r\n    data:{ },\r\n    country: ''\r\n    \r\n  }\r\n  \r\n\r\n  handleCountryChange = async(country)=>{\r\n    const fetchedData= await fetchData(country);\r\n    this.setState({data : fetchedData, country:country});\r\n    \r\n  }\r\n\r\n  //is called when the page re-renders\r\n  //as we are using the function which is async that is why componentdidmount should  await\r\n  async componentDidMount(){\r\n    const fetchedData = await fetchData();\r\n    this.setState({data : fetchedData});\r\n    \r\n  }\r\n\r\n   render(){\r\n     const {data, country} = this.state;\r\n    \r\n     return(\r\n        <div className={styles.container} >\r\n        {/* <div className={styles.navbar}>*/}\r\n          <img className={styles.logo} src={logo} />\r\n          {/* <Toggle />*/}\r\n\r\n          <div className=\"nav\">\r\n            <label className=\"switch\">\r\n            <input type=\"checkbox\"\r\n            onChange={this.bgChange}\r\n            /> \r\n            <span className=\"slider round\"></span>\r\n            </label>\r\n          </div>\r\n       \r\n         { /*these are the props*/}\r\n          <Cards data={data} />\r\n          <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n          <Chart data={data} country={country} />\r\n          </div>\r\n      \r\n     );\r\n   }\r\n  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__36slA\",\"logo\":\"App_logo__2nUMl\",\"navbar\":\"App_navbar__CI1V-\",\"image\":\"App_image__AfZ-A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__39ajy\",\"omg\":\"CountryPicker_omg__2lJ_z\"};","module.exports = __webpack_public_path__ + \"static/media/logo.24fbea10.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__Whb3k\"};"],"sourceRoot":""}